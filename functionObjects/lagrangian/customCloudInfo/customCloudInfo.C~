/*---------------------------------------------------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     |
    \\  /    A nd           | Copyright (C) 2012-2016 OpenFOAM Foundation
     \\/     M anipulation  |
-------------------------------------------------------------------------------
License
    This file is part of OpenFOAM.

    OpenFOAM is free software: you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    for more details.

    You should have received a copy of the GNU General Public License
    along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.

\*---------------------------------------------------------------------------*/

#include "customCloudInfo.H"
#include "kinematicCloud.H"
#include "addToRunTimeSelectionTable.H"
#include "basicKinematicCloud.H" 
#include "basicReactingMultiphaseCloud.H"

// * * * * * * * * * * * * * * Static Data Members * * * * * * * * * * * * * //

namespace Foam
{
namespace functionObjects
{
    defineTypeNameAndDebug(customCloudInfo, 0);

    addToRunTimeSelectionTable
    (
        functionObject,
        customCloudInfo,
        dictionary
    );
}
}


// * * * * * * * * * * * * Protected Member Functions  * * * * * * * * * * * //

void Foam::functionObjects::customCloudInfo::writeFileHeader(const label i)
{
    writeHeader(file(), "Particle Temperatures");
    writeCommented(file(), "Time");
    writeTabbed(file(), "Particle1");
    writeTabbed(file(), "Particle2");
    writeTabbed(file(), "Particle3");
    writeTabbed(file(), "Particle4");
    writeTabbed(file(), "Particle5");
    file() << endl;
}


// * * * * * * * * * * * * * * * * Constructors  * * * * * * * * * * * * * * //

Foam::functionObjects::customCloudInfo::customCloudInfo
(
    const word& name,
    const Time& runTime,
    const dictionary& dict
)
:
    writeFiles(name, runTime, dict, name)
{
    read(dict);
}


// * * * * * * * * * * * * * * * * Destructor  * * * * * * * * * * * * * * * //

Foam::functionObjects::customCloudInfo::~customCloudInfo()
{}


// * * * * * * * * * * * * * * * Member Functions  * * * * * * * * * * * * * //

bool Foam::functionObjects::customCloudInfo::read(const dictionary& dict)
{
    writeFiles::resetNames(dict.lookup("clouds"));

    Info<< type() << " " << name() << ": ";
    if (names().size())
    {
        Info<< "applying to clouds:" << nl;
        forAll(names(), i)
        {
            Info<< "    " << names()[i] << nl;
        }
        Info<< endl;
    }
    else
    {
        Info<< "no clouds to be processed" << nl << endl;
    }

    return true;
}


bool Foam::functionObjects::customCloudInfo::execute()
{
    return true;
}


bool Foam::functionObjects::customCloudInfo::write()
{
    writeFiles::write();

    forAll(names(), i)
    {
        const word& cloudName = names()[i];

        const kinematicCloud& cloud1 =
            obr_.lookupObject<kinematicCloud>(cloudName);

	
	// Type-cast to something we can work with
	basicReactingMultiphaseCloud* cloud = 
	  (basicReactingMultiphaseCloud*) &cloud1;

	scalarField parcelTemperatures(5,0.);

	label j = 0;
	forAllIter(basicReactingMultiphaseCloud, *cloud,  iter)
	  {

	    if (iter().active())
	      {
		// I think the returnReduce thing is for parallel stuff
		parcelTemperatures[j] = 
		  returnReduce(iter().T(), sumOp<scalar>());
		j++;
	      }
	    // we only want the first five
	    if (j>= 5)
	      {
		break;
	      }
	      
	  }


        if (Pstream::master())
        {
            writeTime(file(i));
            file(i)
                << token::TAB
                << parcelTemperatures[0] << token::TAB
                << parcelTemperatures[1] << token::TAB
                << parcelTemperatures[2] << token::TAB
                << parcelTemperatures[3] << token::TAB
                << parcelTemperatures[4] << endl;
        }
    }

    return true;
}


// ************************************************************************* //
